import { WebSocket as WebSocketNode } from 'ws';
export type TBlockchainTimeHistory = {
    [time: string]: number;
};
export type TBlockchainBlocksHistory = {
    [block: string]: string;
};
export declare class Time2BlocksHistoryLoader {
    private isOnline;
    private static instance;
    static getInstance(isOnline?: boolean, newInstance?: Time2BlocksHistoryLoader): Time2BlocksHistoryLoader;
    history: TBlockchainTimeHistory;
    cache: TBlockchainTimeHistory;
    historyBlockIndexed: TBlockchainBlocksHistory;
    timestampKeys: string[];
    blockKeys: number[];
    private readonly mempoolApi;
    private mempoolConn;
    lastBlock: {
        block: number;
        time: string;
    } | null;
    readonly firstBlock: {
        block: number;
        time: string;
    };
    listening: boolean;
    updating: Promise<void>[];
    constructor(isOnline?: boolean);
    setIndex(history: TBlockchainTimeHistory): void;
    updateIndex(history: TBlockchainTimeHistory): void;
    addBlock(block: number, time: string): void;
    loadIndex(path?: string): Promise<void>;
    listenMempool(): void;
    listen(): void;
    stopListen(): void;
    updateBlockNextToTimestamp(timestamp: number, start: {
        height: number;
        timestamp: string;
    }, end: {
        height: number;
        timestamp: string;
    }): Promise<void>;
    private update;
    loadBlock(height: number): Promise<{
        height: number;
        timestamp: string;
    }>;
    updateHistoryIndex(): void;
    getEstimatedBlockFromTimestamp(timestamp: number, start: {
        height: number;
        timestamp: string;
    }, end: {
        height: number;
        timestamp: string;
    }): number;
    offline(): void;
}
export declare class WebSocketFacade {
    private readonly hasWindow;
    clientWeb?: WebSocket;
    clientNode?: WebSocketNode;
    constructor(conn: string);
    private init;
    onOpen(calle: () => void): void;
    onError(calle: (error?: unknown) => void): void;
    onMessage(calle: (message?: string) => void): void;
    onClose(calle: () => void): void;
    close(): void;
    send(serialized: string): void;
}
export declare abstract class Time2BlockConnection {
    private subscriptions;
    onBlock(sub: (block: {
        height: number;
        timestamp: string;
    }) => void): void;
    emit(block: {
        height: number;
        time: string;
    }): void;
    abstract connect(): void;
    abstract close(): void;
}
export declare class Time2BlockMempoolConn extends Time2BlockConnection {
    protected readonly link = "wss://mempool.space/api/v1/ws";
    protected client?: WebSocketFacade;
    constructor();
    connect(): void;
    protected onConnect(): void;
    protected blockSubscribe(): void;
    protected onMessage(res: any): void;
    close(): void;
    private onClose;
}
